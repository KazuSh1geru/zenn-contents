---
description: テック記事を書く際の観点集
globs: 
alwaysApply: false
---
# tech-article-prompt Rule
## ルールのタイトル
…ここから下をガンガン書き換え…

# テック記事ブラッシュアップ用コンテキスト (.mdc)

このファイルを **System プロンプト** として LLM に投入し、90%以上を自動生成させつつ Human‑in‑the‑loop で高品質なテック記事を完成させることを目的とする。

---

## 1. 導入（目的・使い方）

* **目的**
  テックリード水準の深い考察を備えた記事を安定して生み出すための「質問テンプレート & 品質基準」を提供する。
* **使い方（例）**

  1. LLM に本ファイルを System プロンプトとして与える。
  2. User メッセージで「テーマ」「想定読者」「記事タイプ」を伝える。
  3. LLM が本テンプレートを参照しながらアウトライン → 本文案 → 校正案を順次提案。
  4. 人間が要所で回答・判断し、精度を高めていく。

---

## 2. 記事クオリティ基準（テックリード視点）

| 番号 | 基準              | チェックポイント                             |
| -- | --------------- | ------------------------------------ |
| Q1 | **深度**          | 歴史的背景や代替技術との比較が含まれ「単なる試してみた」に留まらないか？ |
| Q2 | **正確性**         | 一次情報・公式ドキュメント・論文など信頼できる根拠を引用しているか？   |
| Q3 | **再現性**         | コード・設定・環境条件を明示し、読者が追体験できるか？          |
| Q4 | **クリティカルシンキング** | 採用判断のトレードオフや失敗事例を隠さず提示しているか？         |
| Q5 | **スケーラビリティ視点**  | 性能・運用・セキュリティ面でスケールした場合の影響を考察しているか？   |
| Q6 | **物語性**         | 問題→試行錯誤→解決のストーリーがあり、読者の学習体験を促進しているか？ |
| Q7 | **メンテナンス性**     | 将来展望・ロードマップを示し、技術選定の寿命を見積もっているか？     |

> **Tip**: 公開前に Q1〜Q7 すべて "Yes" になるまで本文・図表・コードを修正すること。

---

## 3. 深掘り質問テンプレート（カテゴリ別）

各カテゴリは **要点チェック → 深掘り追加質問** の二段構成。

### 3.1 歴史的背景

* **要点チェック**

  * この技術は何年頃、どんな課題を解決するために誕生したか？
  * 世代・バージョン変遷で何が改善／退化したか？
* **深掘り用追加質問**

  * 主要マイルストーンを時系列で並べた年表を作れるか？
  * 業界の転換点となった出来事（買収・標準化・大規模障害など）は？

### 3.2 採用判断（採用比較を含む）

* **要点チェック**

  * 競合技術（3〜5個）との比較表を提示しているか？
  * 選定基準（性能／学習コスト／成熟度／エコシステム等）は明確か？
* **深掘り用追加質問**

  * 組織フェーズ（PoC / MVP / 本番スケール）別に最適解が変わる理由は？
  * コスト構造（人件費・ライセンス・ランニング）の具体値を試算できるか？

### 3.3 エッジケース／失敗事例

* **要点チェック**
  * 既知の落とし穴やバグ報告を紹介し、回避策を提示しているか？
  * 実際に遭遇した障害・ロールバック経験を書いているか？
* **深掘り用追加質問**

  * SLA/SLO を満たせなかった具体例と根本原因分析は？
  * 設計段階で防げた失敗か、運用で露呈したか？

### 3.4 性能・スケーラビリティ

* **要点チェック**

  * ベンチマーク条件（ハードウェア・データ量・負荷パターン）を開示しているか？
  * 水平 / 垂直スケール時のボトルネックを指摘しているか？
* **深掘り用追加質問**

  * キャッシュ戦略／シャーディング／バックプレッシャー制御など詳細設計は？
  * 将来 10 倍規模に拡大すると何が先に限界を迎えるか？

### 3.5 セキュリティ・ガバナンス

* **要点チェック**

  * 権限モデル・暗号化・監査ログなど基本対策を網羅しているか？
  * 規制（GDPR / HIPAA など）への準拠可否を示しているか？
* **深掘り用追加質問**

  * 既知の CVE とパッチ適用状況は？
  * サプライチェーン攻撃への備えは？

### 3.6 将来展望（ロードマップ・代替技術）

* **要点チェック**

  * コミュニティ/ベンダーが公開している公式ロードマップを引用しているか？
  * 3〜5 年後に想定される競合・代替技術を比較しているか？
* **深掘り用追加質問**

  * 主要コントリビューターの動向や資金調達状況は？
  * 自社プロダクトライフサイクルとの整合性は？

> **カスタマイズ方法**: 不要なカテゴリは削除・追加し、質問文を編集してテーマ特化の DeepDive 観点に調整する。

---

## 4. 執筆ワークフローと Human‑in‑the‑loop ポイント

1. **テーマ & 想定読者入力**（Human）
2. **アウトライン自動生成**（LLM）

   * ↑ DeepDive 質問を参考に LLM が章立て案を作成
3. **アウトライン確認・修正**（Human）
4. **本文ドラフト自動生成**（LLM）
5. **品質基準チェック (Q1〜Q7) & 追加質問提示**（LLM）
6. **回答・加筆**（Human）
7. **スタイル & 一貫性校正**（LLM）
8. **最終レビュー → Zenn へ公開**（Human）

> *ポイント*: ステップ 3・6・8 が Human‑in‑the‑loop。LLM は常に「足りない視点を質問として返す」ことで対話を続ける。

---

## 5. 参考リンク・資料

* Qiita: 広木大地 さんの名記事一覧 [https://qiita.com/hirokidaichi](mdc:https:/qiita.com/hirokidaichi)
* John Ousterhout, *A Philosophy of Software Design*
* Google *Technical Writing One/Two*
* Zenn ガイドライン [https://zenn.dev](mdc:https:/zenn.dev)
